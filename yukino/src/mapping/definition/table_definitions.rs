use std::collections::HashMap;
use super::column_definitions::Column;
use super::super::attribution::IndexMethod;

#[allow(dead_code)]

pub struct IndexDefinition {
    pub name: String,
    pub columns: Vec<String>,
    pub method: IndexMethod,
    pub unique: bool
}

/// Types of table
#[allow(dead_code)]
pub enum Table {
    /// NormalTable correspond to an Entity struct
    NormalTable(NormalTableDefinition),
    /// InternalTable was generated by framework
    InternalTable(InternalTableDefinition)
}

impl Table {
    pub fn get_name(&self) -> String {
        match self {
            Table::NormalTable(normal) => normal.name.clone(),
            Table::InternalTable(internal) => internal.name.clone()
        }
    }

    pub fn get_entity_type_name(&self) -> Option<&'static str> {
        match self {
            Table::NormalTable(normal) => Some(normal.entity_type_name),
            Table::InternalTable(_) => None
        }
    }
}

pub trait TableDefinition {
    fn get_table(self) -> Table;
}

/// DataStructure of resolved table definition
/// NormalTable correspond to an Entity struct
/// Will be converted to construct token in macro
///
#[allow(dead_code)]
pub struct NormalTableDefinition {
    /// Database table name
    pub name: String,
    /// Type name of Entity
    pub entity_type_name: &'static str,
    /// List of primary key field name
    pub primary_keys: Vec<String>,
    /// IndexDefinition mapped by index name
    pub indexes: HashMap<String, IndexDefinition>,
    /// ColumnsDefinition mapped by database column name
    pub columns: HashMap<String, Column>,
    /// Column name mapped by field name
    pub name_map: HashMap<String, String>
}

impl TableDefinition for NormalTableDefinition {
    fn get_table(self) -> Table {
        Table::NormalTable(self)
    }
}

/// DataStructure of generated table
/// InternalTable was generated by framework
/// Used to manage relationship in association
/// Will be converted to construct token in macro
#[allow(dead_code)]
pub struct InternalTableDefinition {
    /// Database table name
    pub name: String,
    /// List of primary key field name
    pub primary_keys: Vec<String>,
    /// IndexDefinition mapped by index name
    pub indexes: HashMap<String, IndexDefinition>,
    /// InternalColumnsDefinition mapped by database column name
    pub columns: HashMap<String, InternalTableDefinition>,
}

impl TableDefinition for InternalTableDefinition {
    fn get_table(self) -> Table {
        Table::InternalTable(self)
    }
}