use std::any::TypeId;
use std::collections::HashMap;
use super::column_definitions::Column;
use super::super::attribution::IndexMethod;

#[allow(dead_code)]
pub struct IndexDefinition {
    pub name: String,
    pub columns: Vec<String>,
    pub method: IndexMethod,
    pub unique: bool
}

/// Types of table
#[allow(dead_code)]
enum Table {
    /// NormalTable correspond to an Entity struct
    NormalTable(NormalTableDefinition),
    /// InternalTable was generated by framework
    InternalTable(InternalTableDefinition)
}

/// DataStructure of resolved table definition
/// Will be converted to construct token in macro
#[allow(dead_code)]
pub struct NormalTableDefinition {
    /// Database table name
    pub name: String,
    /// TypeId of Entity
    pub entity_type_id: TypeId,
    /// List of primary key field name
    pub primary_keys: Vec<String>,
    /// IndexDefinition mapped by index name
    pub indexes: HashMap<String, IndexDefinition>,
    /// ColumnsDefinition mapped by database column name
    pub columns: HashMap<String, Column>,
    /// Column name mapped by field name
    pub name_map: HashMap<String, String>
}

/// DataStructure of generated table
/// Used to manage relationship in association
/// Will be converted to construct token in macro
#[allow(dead_code)]
pub struct InternalTableDefinition {
    /// Database table name
    pub name: String,
    /// List of primary key field name
    pub primary_keys: Vec<String>,
    /// IndexDefinition mapped by index name
    pub indexes: HashMap<String, IndexDefinition>,
    /// InternalColumnsDefinition mapped by database column name
    pub columns: HashMap<String, InternalTableDefinition>,
}