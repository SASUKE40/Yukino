use crate::mapping::definition::table_definitions::IndexDefinition;
use super::super::r#type::DatabaseType;
use crate::mapping::attribution::{ReferenceAction, FetchMode};
use crate::mapping::structure::FieldStructure;
use crate::mapping::error::AttributeError;
use heck::SnakeCase;

/// Types of Column
#[allow(dead_code)]
pub enum Column {
    /// NormalColumn correspond to a field in Entity
    NormalColumn(ColumnDefinition),
    /// InternalColumn was generated by framework
    InternalColumn(IndexDefinition),
    /// A reference of other internal column, correspond to a field in Entity
    VirtualColumn(VirtualColumnDefinition)
}

#[allow(dead_code)]
pub struct ColumnDefinition {
    /// Column name in database
    pub name: String,
    /// field name in Entity
    pub field_name: String,
    /// DatabaseType of column
    pub column_type: DatabaseType,
    /// Logic type in type converter layer
    pub logic_type: &'static str
}

impl ColumnDefinition {
    pub fn from_structure(structure: &FieldStructure) -> Result<Self, AttributeError> {
        let column_attr = structure.column_attr.as_ref().unwrap();

        let field_name = structure.ident.to_string();

        Ok(ColumnDefinition {
            name: column_attr.name.clone().unwrap_or(field_name.to_snake_case()),
            field_name,
            column_type: DatabaseType::String, // todo: fix me
            logic_type: "todo"
        })
    }
}

/// InternalColumn was generated from Association mapped value.
#[allow(dead_code)]
pub struct InternalColumnDefinition {
    /// Column name in database
    pub name: String,
    /// DatabaseType of column
    pub column_type: DatabaseType,
    /// Logic type in type converter layer
    pub logic_type: &'static str,
    /// Associated table name
    pub reference_table: String,
    /// Mapping column name
    pub reference_column: String
}


/// Correspond to an InternalColumn
#[allow(dead_code)]
pub struct VirtualColumnDefinition {
    /// field name in Entity
    pub field_name: String,
    /// Table name of internal column
    pub reference_table: String,
    /// Name of internal column
    pub reference_column: String,
    /// table name of value Entity
    pub type_table_name: String,
    /// is list
    pub is_list: bool,
    /// Reference action
    pub on_delete: ReferenceAction,
    /// Reference action
    pub on_update: ReferenceAction,
    /// Fetch_mode
    pub fetch_mode: FetchMode
}

